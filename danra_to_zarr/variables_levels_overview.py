#!/usr/bin/env python
# coding: utf-8


import pandas as pd
import dmidc
import dmidc.harmonie
import dmidc.harmonie.grib.danra as danra_grib
import datetime

from loguru import logger



def build_level_type_dataframes(params_by_level_type):
    dfs = {}

    for level_type in params_by_level_type.keys():
        dfs_leveltype = []
        vars_on_level_type = params_by_level_type[level_type]
        for v in vars_on_level_type:
            vals = list(set(vars_on_level_type[v]))
            df_var = pd.DataFrame([True] * len(vals), index=vals, columns=[v])
            dfs_leveltype.append(df_var)

        df_leveltype = pd.concat(dfs_leveltype, axis=1).sort_index(ascending=False)
        dfs[level_type] = df_leveltype
    return dfs


def sort_cols_by_nonnull_entries(df):
    df_col_sorting_parts = pd.DataFrame(
        dict(
            notnull=df.notnull().sum().sort_values(ascending=True),
            nonzero_index=df.apply(lambda x: x.index[x.notnull()].min()),
        )
    )
    new_col_order = df_col_sorting_parts.sort_values(
        ["notnull", "nonzero_index"], ascending=[False, True]
    ).index

    return df[new_col_order]

def main(fp_overview_file):
    logger.info(f"dmidc version: {dmidc.__version__}")

    (
        PARAMS_SHORT_NAME,
        PARAMS_LONG_NAME,
        LEVEL_TYPES,
        PARAMS_BY_LEVEL_TYPE,
    ) = danra_grib.source.metainfo_cache.load_metadata(fp_tar_example=None)


    dfs = build_level_type_dataframes(PARAMS_BY_LEVEL_TYPE)

    dfs = {k: sort_cols_by_nonnull_entries(v) for k, v in dfs.items()}

    # sort level types by number of variables
    level_types_sorted = sorted(
        dfs.keys(), key=lambda k: dfs[k].notnull().sum().sum(), reverse=True
    )

    str_markdown = "# Overview of variables by level type in DANRA"
    str_markdown += "\n\n"
    str_markdown += "This file was generated by `danra_to_zarr.variables_levels_overview`"
    str_markdown += f" on {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    str_markdown += "\n\n"

    for level_type in level_types_sorted:
        # place a tick if the value is True other empty string
        df = dfs[level_type].map(lambda v: "âœ“" if v is True else "")
        str_markdown += f"\n\n## {level_type}\n\n"

        cols_new = {}
        for v in df.columns:
            param_id = PARAMS_SHORT_NAME.inverse[v]
            cols_new[v] = f"<abbr title='{PARAMS_LONG_NAME[param_id]}'>{v}</abbr>"

        df = df.rename(columns=cols_new)

        df = df.T
        df = df[sorted(df.columns)]

        str_markdown += df.to_markdown()
        # cache
        str_markdown += "\n\n"

    with open(fp_overview_file, "w") as f:
        f.write(str_markdown)
        
    logger.info(f"Wrote overview file to {fp_overview_file}")
    

if __name__ == "__main__":
    fp_overview_file = "variables_levels_overview.md"
    main(fp_overview_file=fp_overview_file)